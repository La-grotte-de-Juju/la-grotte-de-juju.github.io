name: Deploy Next.js site to Pages

on:
  # Déclenché à chaque push sur la branche main
  push:
    branches: ["main"]
  # Permet de lancer ce workflow manuellement depuis l'onglet Actions
  workflow_dispatch:

# Définit les permissions nécessaires pour le GITHUB_TOKEN pour le déploiement sur GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Autorise un seul déploiement concurrentiel, annulant les exécutions précédentes en attente ou en cours pour le même groupe
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18" # Ou la version de Node.js que vous utilisez
          cache: 'npm' # Ou 'yarn' si vous utilisez yarn
      - name: Install Dependencies
        run: npm install # Ou yarn install
      # Important: Assurez-vous que ce script exécute 'next build && next export'
      # Si votre site est dans un sous-répertoire (votrenom.github.io/repo),
      # configurez basePath et assetPrefix dans next.config.js
      - name: Build with Next.js
        run: npm run build # Assurez-vous que ce script fait 'next build && next export'
      # Ajoutez cette étape si 'next export' crée un fichier .nojekyll (nécessaire pour les dossiers commençant par _)
      - name: Create .nojekyll file
        run: touch ./out/.nojekyll
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Dossier contenant les fichiers statiques générés par 'next export' (souvent 'out')
          path: ./out

  # Tâche de déploiement
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # Utilise l'action officielle pour le déploiement
